"use strict";

var vm = require("vm"),
    fs = require("fs"),
    path = require("path"),
    util = require("util"),
    getNativeRunner = require("./nativeRunner"),
    getCompiler = require("./compiler"),
    getPreloader = require("./preLoader"),
    mockedModules = require("./mockedModules"),
    getPrecompiler = require("./preCompiler"),
    _require2 = require("./utils"),
    readFileSync = _require2.readFileSync,
    useRequire = _require2.useRequire,
    _require3 = require("./constants"),
    extensionsIgnoredForPreload = _require3.extensionsIgnoredForPreload,
    nonInternalModules = _require3.nonInternalModules,
    coreModules = _require3.coreModules,
    bindings = process.binding("natives");


var compilerCache = {},
    fsCache = {};

var defaultOptions = {
  preCompiler: false,
  context: {},
  extensions: [".js", ".jsx"]
};

var getRequire = function getRequire(nativeRunner, mockedModules, cache) {
  return function _require(id) {
    var result = void 0;

    if (cache[id]) {
      return cache[id];
    }

    if (useRequire(id)) {
      return require(id);
    }

    if (mockedModules[id]) {
      result = mockedModules[id];
    } else if (bindings[id]) {
      result = nativeRunner(id, _require);
    }

    cache[id] = result;

    return result;
  };
};

module.exports = function (filename, opt) {
  var _Object$assign = Object.assign({}, defaultOptions, opt),
      preCompiler = _Object$assign.preCompiler,
      preload = _Object$assign.preload,
      extensions = _Object$assign.extensions;

  var preCompile = getPrecompiler(preCompiler, compilerCache);

  if (preload) {
    getPreloader(preCompile)(path.join(process.cwd(), filename));
  }

  return function (context) {
    var requireCache = {};

    var _context = Object.assign({}, global, context),
        nativeRunner = getNativeRunner(_context),
        _require = getRequire(nativeRunner, mockedModules, requireCache);

    _require.resolve = require.resolve;
    vm.createContext(_context);

    var Module = _require("module"),
        internalModule = _require("internal/module"),
        compile = getCompiler(Module, _context, _require);

    extensions.forEach(function (ext) {
      return Module._extensions[ext] = function (module, filename) {
        var content = internalModule.stripBOM(readFileSync(filename, "utf8"));

        content = preCompile(content, filename);

        compile.apply(module, [content, filename]);
      };
    });

    return Module._load(path.join(process.cwd(), filename), null, true);
  };
};